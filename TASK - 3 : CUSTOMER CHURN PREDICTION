import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report

data = pd.read_csv("/content/drive/MyDrive/DataSets/CodeWay DataSets/predict customer churn/Churn_Modelling.csv")

data.drop(["RowNumber", "CustomerId", "Surname"], axis=1, inplace=True)

label_encoders = {}
for column in ["Geography", "Gender"]:
    label_encoders[column] = LabelEncoder()
    data[column] = label_encoders[column].fit_transform(data[column])

X = data.drop("Exited", axis=1)
y = data["Exited"]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

rf_classifier = RandomForestClassifier(n_estimators=100, random_state=42)
rf_classifier.fit(X_train, y_train)

y_pred = rf_classifier.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)
print("Classification Report:")
print(classification_report(y_test, y_pred))

feature_importances = pd.DataFrame(rf_classifier.feature_importances_, index=X.columns, columns=['Importance']).sort_values('Importance', ascending=False)
print("Feature Importances:")
print(feature_importances)


import pandas as pd

# Create a sample DataFrame
sample_data = pd.DataFrame({
    'CreditScore': [600, 700],
    'Geography': ['France', 'Germany'],
    'Gender': ['Female', 'Male'],
    'Age': [35, 45],
    'Tenure': [3, 7],
    'Balance': [50000, 100000],
    'NumOfProducts': [1, 2],
    'HasCrCard': [1, 0],
    'IsActiveMember': [1, 1],
    'EstimatedSalary': [60000, 80000]
})

# Preprocess the sample data - encode categorical variables and scale numerical features
for column in ["Geography", "Gender"]:
    sample_data[column] = label_encoders[column].transform(sample_data[column])

sample_data_scaled = scaler.transform(sample_data)

# Make predictions
sample_predictions = rf_classifier.predict(sample_data_scaled)

# Display predictions
print("Predictions for sample data:")
for i, prediction in enumerate(sample_predictions):
    print(f"Customer {i+1}: Churn {'Yes' if prediction == 1 else 'No'}")


